*1. Longest Substring with At Most K Distinct Characters*
Description:
Given a string `s` and an integer `k`, find the length of the longest substring that contains at most `k` distinct characters. The problem requires you to efficiently identify the longest possible substring in `s` where the number of unique characters does not exceed `k`.
 Sample:
1)	Input: s = "eceba", k = 2
 Output: 3
Explanation: The substring "ece" contains exactly 2 distinct characters.
2)	Input: s = "aa", k = 1 
Output: 2 
Explanation: The substring "aa" contains 1 distinct character.

*2. Merge k Sorted Lists*
Description:
Given an array of `k` linked lists, each of which is sorted in ascending order, merge all the linked lists into a single sorted linked list.
Sample:
1)	Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The merged list contains all elements in ascending order.


*3.	4Sum Problem* 
	
Description:
Given an array of `n` integers `nums` and a target value `target`, return all unique quadruplets `[nums[a], nums[b], nums[c], nums[d]]` such that the sum of the four integers equals the target. 
Sample:
1)	Input: nums = [1, 0, -1, 0, -2, 2], target = 0
Output: [[-2,-1,1,2], [-2,0,0,2], [-1,0,0,1]]
Explanation: The unique quadruplets that sum to 0 are returned.
2)	Input: nums = [2, 2, 2, 2, 2], target = 8 
Output: [[2, 2, 2, 2]] 
Explanation: The quadruplet [2, 2, 2, 2] sums to 8.

*4. Jump Game*
You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position. Return true if you can reach the last index, or false otherwise.
Description:

Sample:
1)	Input: nums = [2,3,1,1,4]
 	Output: true 
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
2)	Input: nums = [3,2,1,0,4] 
Output: false 
Explanation: You will always arrive at index 3 no matter what. Its maximum jump 	length is 0, which makes it impossible to reach the last index.

*5. Group Anagrams*
Description:
Given an array of strings strs, group the anagrams together. You can return the answer in any order.An anagram is a word formed by rearranging the letters of a different word, typically using all the original letters exactly once. 
Sample:
Input: strs = ["eat","tea","tan","ate","nat","bat"] 
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Explanation:
•	The words "eat", "tea", and "ate" are anagrams of each other because they can be rearranged to form each other.
•	Similarly, "tan" and "nat" are anagrams.
•	"bat" has no anagrams in the list.
•	The output groups these words together as lists.

*6. Product of Array Except Self*
Description:
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. The problem must be solved without using division and in O(n) time.
Sample:
Input: nums = [1,2,3,4] 
Output: [24,12,8,6]
Explanation:
•	For the input array [1,2,3,4], the output array is [24,12,8,6].
•	The output at each index i is the product of all elements except nums[i]. For example, 24 = 2*3*4, 12 = 1*3*4, 8 = 1*2*4, and 6 = 1*2*3.
•	The algorithm uses a left and right pass to calculate the products without using division.
